import { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Send, Bot, User, Loader2 } from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { useAuthStore } from '@/stores/authStore';

interface Message {
  id: string;
  type: 'user' | 'bot';
  content: string;
  timestamp: Date;
}

export default function ChatbotPage() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'bot',
      content: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa HealthCare+. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ:\n\n‚Ä¢ ƒê·∫∑t l·ªãch kh√°m b·ªánh\n‚Ä¢ Th√¥ng tin v·ªÅ b√°c sƒ© t√¨nh nguy·ªán\n‚Ä¢ Quy√™n g√≥p v√† h·ªó tr·ª£ y t·∫ø\n‚Ä¢ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng h·ªá th·ªëng\n\nB·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay?',
      timestamp: new Date(),
    },
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { user } = useAuthStore();

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue.trim(),
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    // Simulate bot response
    setTimeout(() => {
      const botResponse = generateBotResponse(userMessage.content);
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: botResponse,
        timestamp: new Date(),
      };
      
      setMessages(prev => [...prev, botMessage]);
      setIsTyping(false);
    }, 1500);
  };

  const generateBotResponse = (userInput: string): string => {
    const input = userInput.toLowerCase();
    
    if (input.includes('ƒë·∫∑t l·ªãch') || input.includes('appointment') || input.includes('l·ªãch h·∫πn')) {
      return 'ƒê·ªÉ ƒë·∫∑t l·ªãch kh√°m, b·∫°n c√≥ th·ªÉ:\n\n1. V√†o m·ª•c "B√°c sƒ©" ƒë·ªÉ t√¨m b√°c sƒ© ph√π h·ª£p\n2. Ch·ªçn b√°c sƒ© v√† nh·∫•n "ƒê·∫∑t l·ªãch h·∫πn"\n3. Ch·ªçn th·ªùi gian ph√π h·ª£p\n4. ƒêi·ªÅn th√¥ng tin v√† x√°c nh·∫≠n\n\nB·∫°n c√≥ mu·ªën t√¥i h∆∞·ªõng d·∫´n chi ti·∫øt h∆°n kh√¥ng?';
    }
    
    if (input.includes('b√°c sƒ©') || input.includes('doctor')) {
      return 'H·ªá th·ªëng c√≥ nhi·ªÅu b√°c sƒ© t√¨nh nguy·ªán chuy√™n khoa:\n\n‚Ä¢ Tim m·∫°ch\n‚Ä¢ Da li·ªÖu\n‚Ä¢ Nhi khoa\n‚Ä¢ Th·∫ßn kinh\n‚Ä¢ ƒêa khoa\n\nT·∫•t c·∫£ ƒë·ªÅu l√† c√°c b√°c sƒ© gi√†u kinh nghi·ªám t√¨nh nguy·ªán h·ªó tr·ª£ mi·ªÖn ph√≠. B·∫°n mu·ªën t√¨m b√°c sƒ© chuy√™n khoa n√†o?';
    }
    
    if (input.includes('quy√™n g√≥p') || input.includes('donation') || input.includes('·ªßng h·ªô')) {
      return 'C·∫£m ∆°n b·∫°n mu·ªën quy√™n g√≥p! B·∫°n c√≥ th·ªÉ:\n\n‚Ä¢ Quy√™n g√≥p ti·ªÅn m·∫∑t\n‚Ä¢ Quy√™n g√≥p thi·∫øt b·ªã y t·∫ø\n‚Ä¢ Quy√™n g√≥p thu·ªëc men\n‚Ä¢ T√¨nh nguy·ªán th·ªùi gian\n\nV√†o m·ª•c "Quy√™n g√≥p" ƒë·ªÉ xem c√°c chi·∫øn d·ªãch hi·ªán t·∫°i. M·ªçi ƒë√≥ng g√≥p ƒë·ªÅu ƒë∆∞·ª£c ghi nh·∫≠n v√† s·ª≠ d·ª•ng minh b·∫°ch.';
    }
    
    if (input.includes('h·ªó tr·ª£') || input.includes('gi√∫p ƒë·ª°') || input.includes('assistance')) {
      return 'N·∫øu b·∫°n c·∫ßn h·ªó tr·ª£ y t·∫ø, b·∫°n c√≥ th·ªÉ:\n\n1. T·∫°o y√™u c·∫ßu h·ªó tr·ª£ trong m·ª•c "H·ªó tr·ª£"\n2. M√¥ t·∫£ t√¨nh tr·∫°ng v√† nhu c·∫ßu c·ªßa b·∫°n\n3. ƒê·ª£i ph√™ duy·ªát t·ª´ t·ªï ch·ª©c t·ª´ thi·ªán\n4. Nh·∫≠n h·ªó tr·ª£ sau khi ƒë∆∞·ª£c duy·ªát\n\nCh√∫ng t√¥i s·∫Ω k·∫øt n·ªëi b·∫°n v·ªõi c√°c ngu·ªìn h·ªó tr·ª£ ph√π h·ª£p nh·∫•t.';
    }
    
    if (input.includes('c·∫£m ∆°n') || input.includes('thank')) {
      return `R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n${user ? `, ${user.fullName}` : ''}! üòä\n\nN·∫øu b·∫°n c√≥ th√™m c√¢u h·ªèi n√†o kh√°c, ƒë·ª´ng ng·∫ßn ng·∫°i h·ªèi t√¥i. Ch√∫c b·∫°n s·ª©c kh·ªèe!`;
    }

    return 'T√¥i hi·ªÉu b·∫°n ƒëang c·∫ßn h·ªó tr·ª£. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ:\n\n‚Ä¢ ƒê·∫∑t l·ªãch kh√°m v·ªõi b√°c sƒ©\n‚Ä¢ Th√¥ng tin v·ªÅ c√°c chuy√™n khoa\n‚Ä¢ Quy√™n g√≥p v√† nh·∫≠n h·ªó tr·ª£\n‚Ä¢ S·ª≠ d·ª•ng c√°c t√≠nh nƒÉng c·ªßa h·ªá th·ªëng\n\nB·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n v·ªÅ v·∫•n ƒë·ªÅ c·∫ßn h·ªó tr·ª£ kh√¥ng?';
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const quickActions = [
    'ƒê·∫∑t l·ªãch kh√°m b·ªánh',
    'T√¨m b√°c sƒ© chuy√™n khoa',
    'Quy√™n g√≥p t·ª´ thi·ªán',
    'Y√™u c·∫ßu h·ªó tr·ª£ y t·∫ø',
  ];

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="h-[calc(100vh-8rem)]"
    >
      <div className="grid h-full lg:grid-cols-4 gap-6">
        {/* Chat Interface */}
        <div className="lg:col-span-3">
          <Card className="healthcare-card h-full flex flex-col">
            <CardHeader>
              <CardTitle className="healthcare-heading flex items-center">
                <Bot className="mr-2 h-6 w-6 text-primary" />
                Tr·ª£ l√Ω ·∫£o HealthCare+
              </CardTitle>
              <CardDescription>
                T√¥i s·∫µn s√†ng h·ªó tr·ª£ b·∫°n 24/7 v·ªÅ c√°c v·∫•n ƒë·ªÅ y t·∫ø v√† s·ª©c kh·ªèe
              </CardDescription>
            </CardHeader>
            
            {/* Messages Area */}
            <CardContent className="flex-1 flex flex-col">
              <div className="flex-1 overflow-y-auto space-y-4 mb-4 pr-2">
                <AnimatePresence>
                  {messages.map((message) => (
                    <motion.div
                      key={message.id}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                      className={`flex items-start space-x-3 ${
                        message.type === 'user' ? 'justify-end' : 'justify-start'
                      }`}
                    >
                      {message.type === 'bot' && (
                        <Avatar className="w-8 h-8 bg-gradient-primary">
                          <AvatarFallback>
                            <Bot className="h-4 w-4 text-white" />
                          </AvatarFallback>
                        </Avatar>
                      )}
                      
                      <div
                        className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg whitespace-pre-line ${
                          message.type === 'user'
                            ? 'bg-primary text-primary-foreground'
                            : 'bg-muted'
                        }`}
                      >
                        {message.content}
                      </div>
                      
                      {message.type === 'user' && (
                        <Avatar className="w-8 h-8 bg-gradient-secondary">
                          <AvatarFallback>
                            <User className="h-4 w-4 text-white" />
                          </AvatarFallback>
                        </Avatar>
                      )}
                    </motion.div>
                  ))}
                </AnimatePresence>
                
                {/* Typing Indicator */}
                {isTyping && (
                  <motion.div
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="flex items-center space-x-3"
                  >
                    <Avatar className="w-8 h-8 bg-gradient-primary">
                      <AvatarFallback>
                        <Bot className="h-4 w-4 text-white" />
                      </AvatarFallback>
                    </Avatar>
                    <div className="bg-muted px-4 py-2 rounded-lg">
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-muted-foreground rounded-full animate-pulse" />
                        <div className="w-2 h-2 bg-muted-foreground rounded-full animate-pulse" style={{ animationDelay: '0.2s' }} />
                        <div className="w-2 h-2 bg-muted-foreground rounded-full animate-pulse" style={{ animationDelay: '0.4s' }} />
                      </div>
                    </div>
                  </motion.div>
                )}
                
                <div ref={messagesEndRef} />
              </div>
              
              {/* Input Area */}
              <div className="flex items-center space-x-2">
                <Input
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n..."
                  className="flex-1"
                  disabled={isTyping}
                />
                <Button
                  onClick={handleSendMessage}
                  disabled={!inputValue.trim() || isTyping}
                  className="btn-healthcare"
                >
                  {isTyping ? (
                    <Loader2 className="h-4 w-4 animate-spin" />
                  ) : (
                    <Send className="h-4 w-4" />
                  )}
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
        
        {/* Quick Actions Sidebar */}
        <div className="space-y-4">
          <Card className="healthcare-card">
            <CardHeader>
              <CardTitle className="text-lg">Thao t√°c nhanh</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2">
              {quickActions.map((action, index) => (
                <Button
                  key={index}
                  variant="outline"
                  className="w-full justify-start text-left h-auto py-2"
                  onClick={() => setInputValue(action)}
                >
                  {action}
                </Button>
              ))}
            </CardContent>
          </Card>
          
          <Card className="healthcare-card">
            <CardHeader>
              <CardTitle className="text-lg">M·∫πo s·ª≠ d·ª•ng</CardTitle>
            </CardHeader>
            <CardContent className="text-sm text-muted-foreground space-y-2">
              <p>‚Ä¢ H·ªèi v·ªÅ b·∫•t k·ª≥ v·∫•n ƒë·ªÅ y t·∫ø n√†o</p>
              <p>‚Ä¢ Nh·∫≠n h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng h·ªá th·ªëng</p>
              <p>‚Ä¢ T√¨m hi·ªÉu v·ªÅ c√°c d·ªãch v·ª• t·ª´ thi·ªán</p>
              <p>‚Ä¢ ƒê∆∞·ª£c h·ªó tr·ª£ 24/7</p>
            </CardContent>
          </Card>
        </div>
      </div>
    </motion.div>
  );
}