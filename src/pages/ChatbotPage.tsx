import { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Send, Bot, User, Loader2, MessageCircle, X } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { useAuthStore } from '@/stores/authStore';

interface Message {
  id: string;
  type: 'user' | 'bot';
  content: string;
  timestamp: Date;
}

export default function ChatBubble() {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'bot',
      content: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa MedicalHope+. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ:\n\n‚Ä¢ T√¨m hi·ªÉu v·ªÅ d·ªãch v·ª• y t·∫ø mi·ªÖn ph√≠\n‚Ä¢ ƒê·∫∑t l·ªãch kh√°m b·ªánh\n‚Ä¢ Th√¥ng tin v·ªÅ b√°c sƒ© t√¨nh nguy·ªán\n‚Ä¢ Quy√™n g√≥p v√† h·ªó tr·ª£ y t·∫ø\n‚Ä¢ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng h·ªá th·ªëng\n\nB·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay?',
      timestamp: new Date(),
    },
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { user } = useAuthStore();

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    if (isOpen) {
      scrollToBottom();
    }
  }, [messages, isOpen]);

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue.trim(),
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    // Simulate bot response
    setTimeout(() => {
      const botResponse = generateBotResponse(userMessage.content);
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: botResponse,
        timestamp: new Date(),
      };

      setMessages(prev => [...prev, botMessage]);
      setIsTyping(false);
    }, 1500);
  };

  const generateBotResponse = (userInput: string): string => {
    const input = userInput.toLowerCase();
    const loginPrompt = user ? '' : '\n\nƒê·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y, b·∫°n c·∫ßn [ƒëƒÉng k√Ω](#/register) ho·∫∑c [ƒëƒÉng nh·∫≠p](#/login).';

    if (input.includes('ƒë·∫∑t l·ªãch') || input.includes('appointment') || input.includes('l·ªãch h·∫πn')) {
      if (!user) {
        return 'ƒê·ªÉ ƒë·∫∑t l·ªãch kh√°m, b·∫°n c·∫ßn ƒëƒÉng k√Ω t√†i kho·∫£n ho·∫∑c ƒëƒÉng nh·∫≠p. Sau khi ƒëƒÉng nh·∫≠p, b·∫°n c√≥ th·ªÉ:\n\n1. V√†o m·ª•c "B√°c sƒ©" ƒë·ªÉ t√¨m b√°c sƒ© ph√π h·ª£p\n2. Ch·ªçn b√°c sƒ© v√† nh·∫•n "ƒê·∫∑t l·ªãch h·∫πn"\n3. Ch·ªçn th·ªùi gian ph√π h·ª£p\n4. ƒêi·ªÅn th√¥ng tin v√† x√°c nh·∫≠n\n\nB·∫°n mu·ªën t√¥i h∆∞·ªõng d·∫´n c√°ch ƒëƒÉng k√Ω kh√¥ng?';
      }
      return `ƒê·ªÉ ƒë·∫∑t l·ªãch kh√°m, ${user.fullName}, b·∫°n c√≥ th·ªÉ:\n\n1. V√†o m·ª•c "B√°c sƒ©" ƒë·ªÉ t√¨m b√°c sƒ© ph√π h·ª£p\n2. Ch·ªçn b√°c sƒ© v√† nh·∫•n "ƒê·∫∑t l·ªãch h·∫πn"\n3. Ch·ªçn th·ªùi gian ph√π h·ª£p\n4. ƒêi·ªÅn th√¥ng tin v√† x√°c nh·∫≠n\n\nB·∫°n c√≥ mu·ªën t√¥i h∆∞·ªõng d·∫´n chi ti·∫øt h∆°n kh√¥ng?`;
    }

    if (input.includes('b√°c sƒ©') || input.includes('doctor')) {
      return 'H·ªá th·ªëng c√≥ nhi·ªÅu b√°c sƒ© t√¨nh nguy·ªán chuy√™n khoa:\n\n‚Ä¢ Tim m·∫°ch\n‚Ä¢ Da li·ªÖu\n‚Ä¢ Nhi khoa\n‚Ä¢ Th·∫ßn kinh\n‚Ä¢ ƒêa khoa\n\nT·∫•t c·∫£ ƒë·ªÅu l√† c√°c b√°c sƒ© gi√†u kinh nghi·ªám t√¨nh nguy·ªán h·ªó tr·ª£ mi·ªÖn ph√≠.' + (user ? `\n\n${user.fullName}, b·∫°n mu·ªën t√¨m b√°c sƒ© chuy√™n khoa n√†o?` : '\n\nB·∫°n c√≥ th·ªÉ xem danh s√°ch b√°c sƒ© sau khi [ƒëƒÉng k√Ω](#/register) ho·∫∑c [ƒëƒÉng nh·∫≠p](#/login).');
    }

    if (input.includes('quy√™n g√≥p') || input.includes('donation') || input.includes('·ªßng h·ªô')) {
      return 'C·∫£m ∆°n b·∫°n mu·ªën quy√™n g√≥p! B·∫°n c√≥ th·ªÉ:\n\n‚Ä¢ Quy√™n g√≥p ti·ªÅn m·∫∑t\n‚Ä¢ Quy√™n g√≥p thi·∫øt b·ªã y t·∫ø\n‚Ä¢ Quy√™n g√≥p thu·ªëc men\n‚Ä¢ T√¨nh nguy·ªán th·ªùi gian\n\nV√†o m·ª•c "Quy√™n g√≥p" ƒë·ªÉ xem c√°c chi·∫øn d·ªãch hi·ªán t·∫°i. M·ªçi ƒë√≥ng g√≥p ƒë·ªÅu ƒë∆∞·ª£c ghi nh·∫≠n v√† s·ª≠ d·ª•ng minh b·∫°ch.' + loginPrompt;
    }

    if (input.includes('h·ªó tr·ª£') || input.includes('gi√∫p ƒë·ª°') || input.includes('assistance')) {
      if (!user) {
        return 'ƒê·ªÉ y√™u c·∫ßu h·ªó tr·ª£ y t·∫ø, b·∫°n c·∫ßn ƒëƒÉng k√Ω t√†i kho·∫£n ho·∫∑c ƒëƒÉng nh·∫≠p. Sau khi ƒëƒÉng nh·∫≠p, b·∫°n c√≥ th·ªÉ:\n\n1. T·∫°o y√™u c·∫ßu h·ªó tr·ª£ trong m·ª•c "H·ªó tr·ª£"\n2. M√¥ t·∫£ t√¨nh tr·∫°ng v√† nhu c·∫ßu c·ªßa b·∫°n\n3. ƒê·ª£i ph√™ duy·ªát t·ª´ t·ªï ch·ª©c t·ª´ thi·ªán\n4. Nh·∫≠n h·ªó tr·ª£ sau khi ƒë∆∞·ª£c duy·ªát\n\nB·∫°n mu·ªën t√¥i h∆∞·ªõng d·∫´n c√°ch ƒëƒÉng k√Ω kh√¥ng?';
      }
      return `N·∫øu b·∫°n c·∫ßn h·ªó tr·ª£ y t·∫ø, ${user.fullName}, b·∫°n c√≥ th·ªÉ:\n\n1. T·∫°o y√™u c·∫ßu h·ªó tr·ª£ trong m·ª•c "H·ªó tr·ª£"\n2. M√¥ t·∫£ t√¨nh tr·∫°ng v√† nhu c·∫ßu c·ªßa b·∫°n\n3. ƒê·ª£i ph√™ duy·ªát t·ª´ t·ªï ch·ª©c t·ª´ thi·ªán\n4. Nh·∫≠n h·ªó tr·ª£ sau khi ƒë∆∞·ª£c duy·ªát\n\nCh√∫ng t√¥i s·∫Ω k·∫øt n·ªëi b·∫°n v·ªõi c√°c ngu·ªìn h·ªó tr·ª£ ph√π h·ª£p nh·∫•t.`;
    }

    if (input.includes('c·∫£m ∆°n') || input.includes('thank')) {
      return `R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£${user ? `, ${user.fullName}` : ''}! üòä\n\nN·∫øu b·∫°n c√≥ th√™m c√¢u h·ªèi n√†o kh√°c, ƒë·ª´ng ng·∫ßn ng·∫°i h·ªèi t√¥i. Ch√∫c b·∫°n s·ª©c kh·ªèe!`;
    }

    if (input.includes('ƒëƒÉng k√Ω') || input.includes('register') || input.includes('sign up')) {
      return 'ƒê·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n tr√™n MedicalHope+, b·∫°n c√≥ th·ªÉ:\n\n1. Nh·∫•n v√†o n√∫t "ƒêƒÉng k√Ω" tr√™n trang ch·ªß\n2. ƒêi·ªÅn th√¥ng tin c√° nh√¢n (h·ªç t√™n, email, m·∫≠t kh·∫©u)\n3. X√°c nh·∫≠n email ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n\n4. ƒêƒÉng nh·∫≠p v√† b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng c√°c d·ªãch v·ª•\n\nB·∫°n mu·ªën t√¥i h∆∞·ªõng d·∫´n chi ti·∫øt h∆°n kh√¥ng?';
    }

    if (input.includes('ƒëƒÉng nh·∫≠p') || input.includes('login') || input.includes('sign in')) {
      return 'ƒê·ªÉ ƒëƒÉng nh·∫≠p v√†o MedicalHope+, b·∫°n c√≥ th·ªÉ:\n\n1. Nh·∫•n v√†o n√∫t "ƒêƒÉng nh·∫≠p" tr√™n trang ch·ªß\n2. Nh·∫≠p email v√† m·∫≠t kh·∫©u\n3. Nh·∫•n "ƒêƒÉng nh·∫≠p" ƒë·ªÉ truy c·∫≠p t√†i kho·∫£n\n\nN·∫øu b·∫°n ch∆∞a c√≥ t√†i kho·∫£n, b·∫°n c√≥ th·ªÉ [ƒëƒÉng k√Ω](#/register). B·∫°n c·∫ßn h·ªó tr·ª£ th√™m kh√¥ng?';
    }

    return `T√¥i hi·ªÉu b·∫°n ƒëang c·∫ßn h·ªó tr·ª£${user ? `, ${user.fullName}` : ''}. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ:\n\n‚Ä¢ T√¨m hi·ªÉu v·ªÅ d·ªãch v·ª• y t·∫ø mi·ªÖn ph√≠\n‚Ä¢ ƒê·∫∑t l·ªãch kh√°m v·ªõi b√°c sƒ©\n‚Ä¢ Th√¥ng tin v·ªÅ c√°c chuy√™n khoa\n‚Ä¢ Quy√™n g√≥p v√† nh·∫≠n h·ªó tr·ª£\n‚Ä¢ S·ª≠ d·ª•ng c√°c t√≠nh nƒÉng c·ªßa h·ªá th·ªëng\n\n${user ? 'B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n v·ªÅ v·∫•n ƒë·ªÅ c·∫ßn h·ªó tr·ª£ kh√¥ng?' : 'B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n v·ªÅ v·∫•n ƒë·ªÅ c·∫ßn h·ªó tr·ª£, ho·∫∑c mu·ªën t√¨m hi·ªÉu v·ªÅ c√°ch ƒëƒÉng k√Ω t√†i kho·∫£n kh√¥ng?'}`;
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const quickActions = [
    'ƒê·∫∑t l·ªãch kh√°m b·ªánh',
    'T√¨m b√°c sƒ© chuy√™n khoa',
    'Quy√™n g√≥p t·ª´ thi·ªán',
    'Y√™u c·∫ßu h·ªó tr·ª£ y t·∫ø',
    ...(user ? [] : ['ƒêƒÉng k√Ω t√†i kho·∫£n']),
  ];

  return (
    <>
      {/* Chat Bubble Button */}
      <motion.div
        className="fixed bottom-3 right-4 z-50"
        initial={{ scale: 0 }}
        animate={{ scale: 1 }}
        transition={{ duration: 0.3 }}
      >
        <Button
          className="rounded-full w-14 h-14 bg-gradient-primary text-white shadow-lg hover:bg-primary/90"
          onClick={() => setIsOpen(!isOpen)}
        >
          {isOpen ? <X className="h-6 w-6" /> : <MessageCircle className="h-6 w-6" />}
        </Button>
      </motion.div>

      {/* Chat Window */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, y: 20, scale: 0.8 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 20, scale: 0.8 }}
            transition={{ duration: 0.3 }}
            className="fixed bottom-20 right-6 w-80 md:w-96 h-[32rem] z-50"
          >
            <Card className="healthcare-card h-full flex flex-col shadow-xl">
              <CardHeader className="p-4 bg-gradient-primary text-white rounded-t-lg">
                <CardTitle className="flex items-center text-base">
                  <Bot className="mr-2 h-5 w-5" />
                  Tr·ª£ l√Ω ·∫£o MedicalHope+
                </CardTitle>
              </CardHeader>

              {/* Messages Area */}
              <CardContent className="flex-1 flex flex-col p-4 overflow-hidden">
                <div className="flex-1 overflow-y-auto space-y-3 pr-2">
                  <AnimatePresence>
                    {messages.map((message) => (
                      <motion.div
                        key={message.id}
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -10 }}
                        className={`flex items-start space-x-2 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                      >
                        {message.type === 'bot' && (
                          <Avatar className="w-6 h-6 bg-gradient-primary">
                            <AvatarFallback>
                              <Bot className="h-3 w-3 text-white" />
                            </AvatarFallback>
                          </Avatar>
                        )}

                        <div
                          className={`max-w-[70%] px-3 py-1.5 rounded-lg whitespace-pre-line text-sm ${message.type === 'user' ? 'bg-primary text-primary-foreground' : 'bg-muted'}`}
                        >
                          {message.content}
                        </div>

                        {message.type === 'user' && (
                          <Avatar className="w-6 h-6 bg-gradient-secondary">
                            <AvatarFallback>
                              <User className="h-3 w-3 text-white" />
                            </AvatarFallback>
                          </Avatar>
                        )}
                      </motion.div>
                    ))}
                  </AnimatePresence>

                  {/* Typing Indicator */}
                  {isTyping && (
                    <motion.div
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      className="flex items-center space-x-2"
                    >
                      <Avatar className="w-6 h-6 bg-gradient-primary">
                        <AvatarFallback>
                          <Bot className="h-3 w-3 text-white" />
                        </AvatarFallback>
                      </Avatar>
                      <div className="bg-muted px-3 py-1.5 rounded-lg">
                        <div className="flex space-x-1">
                          <div className="w-1.5 h-1.5 bg-muted-foreground rounded-full animate-pulse" />
                          <div className="w-1.5 h-1.5 bg-muted-foreground rounded-full animate-pulse" style={{ animationDelay: '0.2s' }} />
                          <div className="w-1.5 h-1.5 bg-muted-foreground rounded-full animate-pulse" style={{ animationDelay: '0.4s' }} />
                        </div>
                      </div>
                    </motion.div>
                  )}

                  <div ref={messagesEndRef} />
                </div>

                {/* Input Area */}
                <div className="flex items-center space-x-2 mt-3">
                  <Input
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="Nh·∫≠p tin nh·∫Øn..."
                    className="flex-1 text-sm h-9"
                    disabled={isTyping}
                  />
                  <Button
                    onClick={handleSendMessage}
                    disabled={!inputValue.trim() || isTyping}
                    className="btn-healthcare h-9 w-9 p-0"
                  >
                    {isTyping ? (
                      <Loader2 className="h-4 w-4 animate-spin" />
                    ) : (
                      <Send className="h-4 w-4" />
                    )}
                  </Button>
                </div>

                {/* Quick Actions */}
                <div className="grid grid-cols-2 gap-2 mt-3">
                  {quickActions.map((action, index) => (
                    <Button
                      key={index}
                      variant="outline"
                      className="text-xs h-8 py-1 px-2"
                      onClick={() => setInputValue(action)}
                    >
                      {action}
                    </Button>
                  ))}
                </div>
              </CardContent>
            </Card>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
}